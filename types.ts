/**
 * @file types.ts
 * @description Type definitions for the MR Profit Lite application.
 */

/**
 * Shape of the raw ticker data from Binance's 24hr ticker API.
 */
export interface BinanceTicker {
  symbol: string;
  lastPrice: string;
  priceChangePercent: string;
  quoteVolume: string; // Volume in USDT
  openInterest: string;
}

/**
 * Shape of the raw funding rate data from Binance's premium index API.
 */
export interface BinanceFundingRate {
    symbol: string;
    lastFundingRate: string;
}

/**
 * A processed and enriched ticker object, including calculated metrics.
 */
export interface AnalyzedTicker {
    symbol: string;
    lastPrice: string;
    priceChangePercent: string;
    volume: string;
    openInterest: string;
    volatility: number;
    fundingRate: number;
}

/**
 * The comprehensive market analysis data passed to the AI service.
 */
export interface MarketAnalysisData {
  tickers: AnalyzedTicker[];
  marketTrend: 'Bullish' | 'Bearish' | 'Neutral';
  btcPrice: string;
  btcChange: string;
}

/**
 * Represents a single level in a grid trading strategy.
 */
export interface GridLevel {
  price: number;
  size: string;
}

/**
 * The final, structured trading recommendation object.
 * This is generated by the AI and then refined by deterministic logic.
 */
export interface TradingRecommendation {
  id: string; // Unique ID for each recommendation
  pair: string;
  recommendation: 'LONG' | 'SHORT';
  justification: string;
  entryPrice: number;
  takeProfit: number;
  stopLoss: number;
  gridLevels: GridLevel[];
  estimatedProfitPercent: number;
}

/**
 * Represents the result of a Twitter sentiment analysis for a single coin.
 */
export interface SentimentResult {
  coin: string;
  score: number;
  status: 'Bullish üöÄ' | 'Bearish ‚ö†Ô∏è' | 'Neutral ‚ö™';
}

/**
 * Represents a trade that has been logged by the user for tracking.
 */
export interface LoggedTrade {
  id: string;
  pair: string;
  recommendation: 'LONG' | 'SHORT';
  entryPrice: number;
  closePrice?: number;
  status: 'Active' | 'Closed';
  pnlPercent?: number;
  logTime: number;
}

/**
 * Represents a simulated message sent to the Telegram feed.
 */
export interface TelegramMessage {
  id: string;
  text: string;
  timestamp: number;
}

/**
 * Represents a toast notification message.
 */
export interface ToastNotification {
  id: number;
  message: string;
  type: 'success' | 'info' | 'error';
}

/**
 * Represents the user's Telegram API settings.
 */
export interface TelegramSettings {
  token: string;
  chatId: string;
}